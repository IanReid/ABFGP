[GENERAL]
description = ABFGP - Alignment Based Fungal Gene Prediction 
db_adaptor  = Bio::DB::GFF
db_args     = -adaptor dbi::mysql
              -dsn     dbi:mysql:database=XXX-DATABASE-NAME-XXX;host=XXX-DATABASE-HOST-XXX
user        = XXX-DATABASE-USER-XXX
pass        = XXX-DATABASE-PASS-XXX 


aggregators = "Gene{Exon/Gene}"
              "BlastHit{Hsp/BlastHit}"
              "OpenReadingFramesPerFrame{orf}"
              "OrfOverlappingHsp{similarity}"
              "KnownProteinCDS{appr_exon}"
              "KnownGeneCDS{exon}"
              "PacbPORF{ProjectedLeadingStop,ProjectedFirstExonOnOrf,ProjectedUnigeneGap,PacbPORF,ProjectedFinalExonOnOrf,ProjectedTailingStop}"
              "TMHMMPred{OrgLeadingStop,TMhelix,OrgTailingStop}"
              "KnownAnnotatedIntron{SpliceDonor,PPTregex,BPregex,SpliceAcceptor}"
              "PredictedGeneStructure{AbfgpExon}"
              "joinedPeptideFragments{peptideFragment}"
              "SignalPeptide{tsspssmSignalPeptide,predSignalPeptide}"
              "ProjectedSignalPeptide{projectedTSSpssm,projectedSignalPeptide}"
              "AbfgpJoinedCodingBlocks{AbfgpCodingBlock,LowSimilarityRegionCodingBlockGraph,Estimated3pAbfgpCodingBlock,Estimated5p3pAbfgpCodingBlock,Estimated5pAbfgpCodingBlock,Fragment3pAbfgpCodingBlock,Fragment5p3pAbfgpCodingBlock,Fragment5pAbfgpCodingBlock}"
              "AbgpPerformance{AbfgpPerformanceTP,AbfgpPerformanceFP,AbfgpPerformanceFN}"
              "UnigeneAlignment{UTR5UGExon,UGexon,UTR3UGExon}"
              "AnnotatedGeneSequence{utr5exon,CDS,stop_codon,utr3exon}"
              "AbgpPerformance{AbfgpPerformanceTP,AbfgpPerformanceFP,AbfgpPerformanceFN}"
              "AbfgpConfirmedGeneModel{AbfgpExon,AbfgpIntron,AbfgpSequenceError}"
              "AnnotatedGeneModelError{ErroneousIntron,ErroneousExon}"
              "maPresence{algPres}"
              "maSimilarity{algSim}"
              "ripping{RIPindex}"

init_code = sub color_splicesites {
                my $feature = shift;
                my $score   = $feature->score;
                my $cutoff0 = 8.0;
                my $cutoff1 = 3.0;
                my $cutoff2 = -2.0;
                return color_pssmsites($score,$cutoff0,$cutoff1,$cutoff2);
            }
            sub color_tss {
                my $feature = shift;
                my $score   = $feature->score;
                my $cutoff0 = 10.0;
                my $cutoff1 = 6.0;
                my $cutoff2 = 1.0;
                return color_pssmsites($score,$cutoff0,$cutoff1,$cutoff2);
            }
            sub color_signalp {
                my $feature = shift;
                my $score   = $feature->score;
                my $cutoff0 = 1.0;
                my $cutoff1 = 0.8;
                my $cutoff2 = 0.4;
                return color_pssmsites($score,$cutoff0,$cutoff1,$cutoff2);
            }
            sub color_pacbporfs {
                my $feature = shift;
                my $method = $feature->method;
                if ($method eq 'ProjectedLeadingStop')
                {
                    return 'black';
                } elsif ($method eq 'ProjectedUnigeneGap')
                {
                    return 'silver';
                } elsif ($method eq 'ProjectedFinalExonOnOrf')
                {
                    return 'silver';
                } elsif ($method eq 'ProjectedFirstExonOnOrf')
                {
                    return 'silver';
                } elsif ($method eq 'ProjectedTailingStop')
                {
                    return 'black';
                } else
                {
                    # no action here!
                }
                my $score   = $feature->score;
                my $cutoff0 = 1.0;
                my $cutoff1 = 0.75; # was 0.75
                my $cutoff2 = 0.20; # was 0.40
                return color_pssmsites($score,$cutoff0,$cutoff1,$cutoff2);
            }
            sub color_pssmsites {
                my($score,$cutoff0,$cutoff1,$cutoff2) = @_;
                my $hex3 = "";
                my $hex2 = "";
                my $hex1 = "";
                if  ($score >= $cutoff0)
                {
                    # dark green
                    return 'rgb(0,100,0)';
                } elsif ($score >= $cutoff1)
                {
                    # color scale from bright green to bright yellow
                    $hex1 = 255 - (($score-$cutoff1)/($cutoff0-$cutoff1))*255;
                    $hex2 = 255;
                    $hex3 = 0;
                    return sprintf "rgb(%d,%d,%d)", $hex1, $hex2, $hex3;
                } elsif ($score >= $cutoff2)
                {
                    # color scale from bright yellow to bright red
                    $hex1 = 255;
                    $hex2 = 255 * (($score-$cutoff2)/($cutoff1-$cutoff2));
                    $hex3 = 20;
                    return sprintf "rgb(%d,%d,%d)", $hex1, $hex2, $hex3;
                } else
                {
                    ## bright red
                    return 'rgb(255,0,0)';
                    #return 'black';
                }
            }
            sub descr_splicesites {
                my $feature = shift;
                my $score   = $feature->score;
                my $phase   = $feature->phase;
                my $rounded = sprintf("%.2f", $score);
                my @targets = $feature->attributes('Non-canonical');
                if (scalar(@targets)==1)
                {
                    return $targets[0].' '.$rounded.' ('.$phase.')';
                } else
                {
                    return $rounded.' ('.$phase.')';
                }
            }
            sub predintron_glyph {
                my $feature = shift;
                my $name = $feature->name;
                if (index($name,"[") > 0)
                {
                    return 'crossbox';
                } else
                {
                    return 'span';
                }
            }



# Installed plugins
plugins = FastaDumper 

# Web site configuration info
stylesheet  = /gbrowse/gbrowse.css
buttons     = /gbrowse/images/buttons
tmpimages   = /gbrowse/tmp

# units
# units = R
# unit_divider = 1000000

# where to place the key
#keystyle     = between | bottom
keystyle     = bottom
#empty_tracks = dashed | key | line | suppress
empty_tracks = suppress

# panel colors
overview bgcolor = lightgrey
detailed bgcolor = lightgoldenrodyellow
key bgcolor      = beige

# routines to compile in advance

# what image widths to offer
image widths  = 450 640 800 1024

# default width of detailed view (pixels)
default width = 1024
default features = GCcontent 
                   RIP
                   Translation
                   Orfs
                   UnigeneAlignment
                   ProteomicsData
                   AnnotatedGeneSequence
                   KnownIntrons
                   AbgpPerformanceTrack
                   ConfirmedGeneModel
                   GeneModelErrors
                   IntronConnectingOrfsTrack
                   SequenceErrors
                   abfgpPresence
                   abfgpSimilarity
                   PacbpUnigene
                   PacbpOrf
                   TMHMM
                   SIGNALPTSS
                   projectedSIGNALPTSS
                   TssPssm
                   DonorSites
                   AcceptorSites


# max and default segment sizes for detailed view
max segment     = 1000000
default segment = 50000

# standard zoom levels to be offered to user
zoom levels    = 100 140 250 500 1000 1500 2500 5000 10000 20000 

# fine zoom to be offered -- please provide a percentage
fine zoom      = 20%

# automatic link to detail pages
link = AUTO

# "automatic" classes to try when an unqualified identifier is given
#automatic classes = 

# List of remote annotation sources: format is URL/name pairs separated by
# white space.  Please use quotation marks to prevent internal spaces from
# being interpreted.
#remote sources = "Lincoln Stein's test 1" http://stein.cshl.org/~lstein/features.txt
#		 "Lincoln Stein's test 2" http://stein.cshl.org/~lstein/features2.gff


# examples to show in the introduction
examples = 

### HTML TO INSERT AT VARIOUS STRATEGIC LOCATIONS ###

# at the top...
header = <h1>ABFGP - Alignment Based Fungal Gene Prediction</h1> 

# at the bottom...
footer = <hr>
	<table width="100%">
	<TR>
	<TD align="LEFT" class="databody">
	For the source code for this browser, see the <a href="http://www.gmod.org">
	Generic Model Organism Database Project.</a>  For other questions, send
	mail to <a href="mailto:lstein@cshl.org">lstein@cshl.org</a>.
	</TD>
	</TR>
	</table>

# Various places where you can insert your own HTML -- see configuration docs
html1 = 
html2 = 
html3 = 
html4 = 
html5 = 
html6 =

[TRACK DEFAULTS]
glyph       = generic
height      = 8
bgcolor     = cyan
fgcolor     = cyan
fontcolor   = black
font2color  = blue
label density = 25
bump density  = 100

##################################################################################
# General 
##################################################################################

[GCcontent]
glyph          = dna
global feature = 1
height         = 40
do_gc          = 1
fgcolor        = red
axis_color     = blue
strand         =
gc_window      = 100
category       = Sequence properties
key            = DNA sequence


[RIP]
feature      = ripping 
glyph        = xyplot
graph_type   = line
fgcolor      = black
bgcolor      = black 
height       = 15
min_score    = 0.0
max_score    = 15.0
scale        = right
description  = 0
key          = RIPindex 
category     = Sequence properties 



[Translation]
glyph          = translation
global feature = 1
height         = 40
fgcolor        = purple
start_codons   = 0
stop_codons    = 1
translation    = 3frame
category       = Sequence properties
key            = 3-Frame Translation

[Translation:1]
hide = 0 

[Translation:501]
hide = 1


[Translation6frames]
glyph          = translation
global feature = 1
height         = 30
fgcolor        = purple
start_codons   = 0
stop_codons    = 1
translation    = 6frame
category       = Sequence properties
key            = 6-Frame Translation


[Orfs]
feature      = OpenReadingFramesPerFrame    
glyph        = segments
bgcolor      = sub {
                my $feature = shift;
                my $score    = $feature->score;
                if ($score == 1) {
                   return 'green';
                } elsif  ($score == 0)
                {
                   return 'yellow';
                } elsif  ($score == -1)
                {
                   return 'red';
                } else  
                {
                   return 'black';
                }
        }
fgcolor      = sub {
                my $feature = shift;
                my @targets = $feature->attributes('knownOrf');
                if (scalar(@targets)==1 && $targets[0] eq 'True')
                {
                    return 'rgb(139,136,120)'; # Cornsilk 4, grayish
                    #return 'rgb(148,0,211)';   # purple
                } else
                {
                    return 'black';
                }
            } 
height       = sub {
                my $feature = shift;
                my @targets = $feature->attributes('knownOrf');
                if (scalar(@targets)==1 && $targets[0] eq 'True')
                {
                    return 12;
                } else
                {
                    return 5;
                }
            }
linewidth    = sub {
                my $feature = shift;
                my @targets = $feature->attributes('knownOrf');
                if (scalar(@targets)==1 && $targets[0] eq 'True')
                {
                    return 4;
                } else
                {
                    return 1;
                }
            }
title        = sub {
                return "Open Reading Frames (ORFs) from * to *";
               }
category     = Open reading frames
key          = open reading frames (getorf-tcode)


#################################################################
##### current gene model(s) and unigene evidence
#################################################################

[UnigeneAlignment]
feature      = UnigeneAlignment
glyph        = segments
bgcolor      = sub {
                my $feature = shift;
                my $method   = $feature->method;
                if ($method eq 'UGexon') {
                    return 'blue';
                } else {
                    return 'orange';
                }
              }
fgcolor      = black
height       = 5
linewidth    = 1
category     = Gene Locus
key          = Unigene alignment

[ProteomicsData]
feature      = joinedPeptideFragments 
glyph        = segments
bgcolor      = sub {
                my $feature = shift;
                my $score   = $feature->score;
                if ($score == 1) {
                    return 'purple';
                } else {
                    return 'pink';
                }
             }
fgcolor      = black
height       = 6 
linewidth    = 0
key          = proteomics data 
category     = Gene Locus 
hide         = 0
label        = 1 

[AnnotatedGeneSequence]
feature      = AnnotatedGeneSequence 
glyph        = segments
bgcolor      = sub {
                my $feature = shift;
                my $method   = $feature->method;
                if ($method eq 'CDS') {
                    return 'blue';
                } else {
                    if ($method eq 'stop_codon') {
                        return 'red';
                    } else {
                        return 'orange';
                    }
                }
              }
fgcolor      = black
height       = 5
linewidth    = 1
category     = Gene Locus 
key          = Annotated Gene Structure


[KnownIntrons]
feature      = KnownAnnotatedIntron:knownIntron
glyph        = segments
height       = 10
bgcolor      = sub {
                my $feature = shift;
                my $method = $feature->method;
                my $score  = $feature->score;
                if ($method eq 'SpliceDonor')
                {
                    return &color_splicesites($feature);
                } elsif ($method eq 'SpliceAcceptor')
                {
                    return &color_splicesites($feature);
                } elsif ($method eq 'BPregex')
                {
                    if ($score == 1)
                    {
                        return 'rgb(0,100,0)';
                    } elsif ($score == 0)
                    {
                        return 'rgb(124,252,0)';
                    } else
                    {
                        return 'rgb(255,255,0)';
                    }
                } elsif ($method eq 'PPTregex')
                {
                    return 'silver';
                } else
                {
                }
             }
category     = Gene Locus 
key          = introns
color        = black



#################################################################
##### ABFGP performance benchmark
#################################################################

[AbgpPerformanceTrack]
feature      = AbgpPerformance 
glyph        = segments
bgcolor      = green
bgcolor      = sub {
                my $feature = shift;
                my $method   = $feature->method;
                if ($method eq 'AbfgpPerformanceTP') {
                    return 'green';
                } else {
                    if ($method eq 'AbfgpPerformanceFP') {
                        return 'red';
                    } else {
                        return 'orange';
                    }
                }
               }
fgcolor      = black
height       = 9
linewidth    = 1
category     = ABFGP confirmed Gene Model
key          = Unigene Performance Benchmark 

#################################################################
##### ABFGP predicted Gene Model
#################################################################

[ConfirmedGeneModel]
feature      = AbfgpConfirmedGeneModel
fgcolor      = black 
bgcolor      = sub {
                  my $feature = shift;
                  my $method = $feature->method;
                  my $score  = $feature->score;
                  if ($method eq 'AbfgpExon') {
                      if ($score==1) {
                          return 'green';
                      } else {
                          return 'silver';
                      }
                  } elsif ($method eq 'AbfgpIntron') {
                      if ($score==1) {
                          return 'lime';
                      } else {
                          return 'silver';
                      }
                  } else
                  {
                      return 'purple';
                  }
               }
height       = sub {
                  my $feature = shift;
                  my $method = $feature->method;
                  if ($method eq 'AbfgpExon') {
                      return 9;
                  } elsif ($method eq 'AbfgpSequenceError') {
                      return 9;
                  } else
                  {
                      return 3;
                  }
               }
glyph        = segments
category     = ABFGP confirmed Gene Model
key          = ABFGP predicted GeneModel
link         = sub {
                  my $feature = shift;
                  my $url = "/cgi-bin/gbrowse_details/abfgp/?name=".$feature->ref.";class=AbfgpGeneStructure";
                  return $url;
               }

[GeneModelErrors]
feature      = AnnotatedGeneModelError 
glyph        = segments
bgcolor      = sub {
                  my $feature = shift;
                  my $method = $feature->method;
                  if ($method eq 'ErroneousExon') {
                      return 'red';
                  } else
                  {
                      return 'orange';
                  }
               }
fgcolor      = sub {
                  my $feature = shift;
                  my $method = $feature->method;
                  if ($method eq 'ErroneousExon') {
                      return 'red';
                  } else
                  {
                      return 'orange';
                  }
               }
height       = sub {
                  my $feature = shift;
                  my $method = $feature->method;
                  if ($method eq 'ErroneousExon') {
                      return 7;
                  } else
                  {
                      return 2;
                  }
               }
category     = ABFGP confirmed Gene Model
key          = Annotated GeneModel Errors 
compact      = 1
label        = 0


#################################################################
##### ABFGP intron-exon prediction data 
#################################################################


[IntronConnectingOrfsTrack]
feature      = IntronConnectingOrfs
glyph        = \&predintron_glyph;
color        = sub {
                  my $feature = shift;
                  my $source = $feature->source;
                  if ($source eq 'ABGPprojecting') {
                      return 'rgb(0,100,0)';
                  } elsif ($source eq 'ABGPprojectingTE')
                  {
                      return 'rgb(0,100,0)';
                  } elsif ($source eq 'ABGPmapping')
                  {
                      return 'rgb(0,255,0)';
                  } elsif ($source eq 'ABGPmappingTE')
                  {
                      return 'rgb(0,255,0)';
                  } elsif ($source eq 'ABGPstl3nCONS')
                  {
                      return 'rgb(0,229,238)';
                  } elsif ($source eq 'ABGPstl3n')
                  {
                      return 'rgb(0,104,139)';
                  } elsif ($source eq 'ABGPbridgeing')
                  {
                      return 'rgb(184,134,11)';
                  } elsif ($source eq 'ABGPcig')
                  {
                      return 'rgb(160,32,240)';
                  } elsif ($source eq 'ABGPphs')
                  {
                      return 'rgb(255,20,147)';
                  } elsif ($source eq 'ABGPfailed')
                  {
                      return 'silver';
                  } else {
                      return 'black';
                  }
              }
expand       = 1
description  = 0
height       = 3
key          = Predicted Introns
category     = ABFGP confirmed Gene Model



[IntronConnectingOrfsTrack:1]
label       = 1
expand      = 1
description = 1
title       = sub {
                my $feature = shift;
                my @targets = $feature->attributes('Note');
                return "Reference organism: ".$targets[0];


[IntronConnectingOrfsTrack:1100]
label       = 1
expand      = 1
description = 0
title       = 0


[IntronConnectingOrfsTrack:1501]
label       = 0
expand      = 1
description = 0
title       = 0


[SequenceErrors]
feature      = SequenceErrorConnectingOrfs 
glyph        = segments 
bgcolor      = sub {
                  my $feature = shift;
                  my $source = $feature->source;
                  my $score  = $feature->score;
                  if ($source eq 'AbfgpSequenceError') {
                      if ($score == 1.0) { 
                          return 'red';
                      } else {
                          return 'orange';
                      }
                  } else {
                      return 'silver';
                  }
             }
fgcolor      = sub {
                  my $feature = shift;
                  my $source = $feature->source;
                  my $score  = $feature->score;
                  if ($source eq 'AbfgpSequenceError') {
                      if ($score == 1.0) {
                          return 'red';
                      } else {
                          return 'orange';
                      }
                  } else {
                      return 'silver';
                  }
             }
expand       = 1
description  = 0
height       = 3
key          = Predicted SequenceErrors 
category     = ABFGP confirmed Gene Model


[SequenceErrors:1]
label       = 1
expand      = 1
description = 1
title       = sub {
                my $feature = shift;
                my @targets = $feature->attributes('Note');
                return "Reference organism: ".$targets[0];


[SequenceErrors:1501]
label       = 0 
expand      = 1
description = 0
title       = 0





[abfgpPresence]
feature      = maPresence
glyph        = xyplot
#graph_type   = line
fgcolor      = black 
bgcolor      = silver 
height       = 15
min_score    = 0.0
max_score    = 1.0
scale        = right
description  = 0
key          = alignment presence 
category     = General 

[abfgpSimilarity]
feature      = maSimilarity
glyph        = xyplot
#graph_type   = line
fgcolor      = black 
bgcolor      = black 
height       = 15
min_score    = 0.0
max_score    = 1.0
scale        = right
description  = 0
key          = alignment similarity 
category     = General



#################################################################
##### alignment evidence tracks
#################################################################


[PacbpUnigene]
feature      = PacbPORF:unigene-TBLASTX
glyph        = segments
bgcolor      = \&color_pacbporfs
fgcolor      = black
height       = 12
linewidth    = 1
key          = Informant Unigene Similarities
category     = Abfgp Predicted Gene Structure
label        = sub {
                my $feature = shift;
                my @targets = $feature->attributes('Informant');
                my $name    = $feature->name;
                if (scalar(@targets)==1)
                {
                    return substr($targets[0],1,-1);
                } else
                {
                    return $name;
                }
               }
description  = 0


[PacbpOrf]
feature      = PacbPORF:getorf-TBLASTX PacbPORF:HMM
glyph        = segments
bgcolor      = \&color_pacbporfs
fgcolor      = black
height       = 12
linewidth    = 1
key          = Informant Gene Similarities
category     = Abfgp Predicted Gene Structure
link         = sub {
                  my $feature = shift;
                  my $url = "/cgi-bin/gbrowse_details/abfgp/?ref=".$feature->ref.";name=".$feature->name.";class=Similarity";
                  return $url;
               }
expand       = 1

[PacbpOrf:1]
description = 1
label        = sub {
                my $feature = shift;
                my @targets = $feature->attributes('Informant');
                my $name    = $feature->name;
                if (scalar(@targets)==1)
                {
                    return substr($targets[0],1,-1);
                } else
                {
                    return $name;
                }
               }

[PacbpOrf:1600]
label       = 0 
description = 0
title       = 0




#################################################################
##### predicted gene structure features
#################################################################

[TMHMM]
feature      = TMHMMPred 
glyph        = segments
bgcolor      = sub {
                my $feature = shift;
                my $method   = $feature->method;
                if ($method eq 'TMhelix') {
                    return 'orange';
                } else {
                    return 'black';
                }
              }
fgcolor      = black
height       = 5
linewidth    = 1
category     = Predicted gene structure features
key          = TMHMM


#[SIGNALP]
#feature      = predSignalPeptide 
#glyph        = segments
#bgcolor      = \&color_signalp
#fgcolor      = black
#height       = 5
#stranded     = 1
#linewidth    = 1
#category     = Predicted gene structure features
#key          = SignalP 


[SIGNALPTSS]
feature      = SignalPeptide
glyph        = segments
bgcolor      = sub {
                my $feature = shift;
                my $method  = $feature->method;
                if ($method eq 'tsspssmSignalPeptide')
                {
                    return &color_tss($feature);
                } else
                {
                    return &color_signalp($feature);
                }
             }
description  = sub {
                my $feature = shift;
                my $score    = $feature->score;
                return $score;
        }
fgcolor      = black
height       = sub {
                my $feature = shift;
                my $method  = $feature->method;
                if ($method eq 'tsspssmSignalPeptide')
                {
                    return 9;
                } else
                {
                    return 5;
                }
             }
stranded     = sub {
                my $feature = shift;
                my $method  = $feature->method;
                if ($method eq 'tsspssmSignalPeptide')
                {
                    return 0;
                } else
                {
                    return 1;
                }
             }
 
linewidth    = 1
category     = Predicted gene structure features
key          = SignalP


[projectedSIGNALPTSS]
feature      = ProjectedSignalPeptide
glyph        = segments
bgcolor      = sub {
                my $feature = shift;
                my $method  = $feature->method;
                if ($method eq 'projectedTSSpssm')
                {
                    return &color_tss($feature);
                } else
                {
                    return &color_signalp($feature);
                }
             }
fgcolor      = black
height       = sub {
                my $feature = shift;
                my $method  = $feature->method;
                if ($method eq 'projectedTSSpssm')
                {
                    return 9;
                } else
                {
                    return 5;
                }
             }

stranded     = sub {
                my $feature = shift;
                my $method  = $feature->method;
                if ($method eq 'projectedTSSpssm')
                {
                    return 0;
                } else
                {
                    return 1;
                }
             }

linewidth    = 1
category     = Predicted gene structure features
key          = ProjectedSignalP



[projectedSIGNALPTSS:1]
description = 1
label        = sub {
                my $feature = shift;
                my @targets = $feature->attributes('Informant');
                my $name    = $feature->name;
                if (scalar(@targets)==1)
                {
                    return substr($targets[0],1,-1);
                } else
                {
                    return $name;
                }
               }

[projectedSIGNALPTSS:1600]
label       = 0
description = 0
title       = 0



[TssPssm]
feature      = tsspssm
glyph        = segments
bgcolor      = \&color_tss
description  = sub {
                my $feature = shift;
                my $score    = $feature->score;
                return $score;
        }
fgcolor      = black
height       = 9
linewidth    = 0
key          = Start Sites
category     = Predicted gene structure features


[TssPssm:501]
label       = 0
description = 0

[TssPssm:2001]
hide        = 1



[DonorSites]
feature      = SpliceDonor:PSSM4FUNGI
glyph        = segments
bgcolor      = \&color_splicesites
fgcolor      = black
height       = 9
description  = \&descr_splicesites
linewidth    = 1
key          = PSSM Donor Sites
category     = Predicted gene structure features

[DonorSites:1]
label       = 1

[DonorSites:501]
label       = 0
description = 0

[DonorSites:2001]
hide        = 1

[AcceptorSites]
feature      = SpliceAcceptor:PSSM4FUNGI
glyph        = segments
bgcolor      = \&color_splicesites
fgcolor      = black
height       = 9
linewidth    = 1
description  = \&descr_splicesites
key          = PSSM Acceptor Sites
category     = Predicted gene structure features

[AcceptorSites:1]
label       = 1

[AcceptorSites:501]
label       = 0
description = 0

[AcceptorSites:2001]
hide        = 1


